import sys
import argparse
from openai import OpenAI
from ai import help_strings


def main():
    parser = argparse.ArgumentParser(description=help_strings.script_description)
    parser.add_argument('--sysm', help=help_strings.sysm_help)
    parser.add_argument('--ollama', type=bool, help=help_strings.ollama_help)
    args = parser.parse_args()

    user_message = None
    if not sys.stdin.isatty():
        user_message = sys.stdin.read().strip()

    try:
        if user_message is None:
            raise SystemExit(1) 

    except SystemExit as e:
        if e.code == 1:
            print("Please pipe your message to the AI as a string and run the script again")
        else:
            print("Unexpected error")
        sys.exit(e.code)

    system_message = args.sysm

    client = OpenAI()

    # type(response_dict_ai) --> <class 'openai.types.chat.chat_completion.ChatCompletion'>
    response_object = call_ai(client, system_message, user_message)

    response_dict = response_object.model_dump()

    response_string = response_dict["choices"][0]["message"]["content"]

    print(response_string)


def call_ai(client, system_message, user_message):
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": system_message 
            },
            {
                "role": "user",
                "content": user_message
            }
        ]
    )
    return response


if __name__ == "__main__":
    main()
